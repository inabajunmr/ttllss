package handshake

// https://datatracker.ietf.org/doc/html/rfc8446#section-4.1.2
// struct {
// 	ProtocolVersion legacy_version = 0x0303;    /* TLS v1.2 */
// 	Random random;
// 	opaque legacy_session_id<0..32>;
// 	CipherSuite cipher_suites<2..2^16-2>;
// 	opaque legacy_compression_methods<1..2^8-1>;
// 	Extension extensions<8..2^16-1>;
// } ClientHello;

type ClientHello struct {
	// In previous versions of TLS, this field was used for version negotiation and represented the highest version number supported by the client. Experience has shown that many servers do not properly implement version negotiation, leading to "version intolerance" in which the server rejects an otherwise acceptable ClientHello with a version number higher than it supports. In TLS 1.3, the client indicates its version preferences in the "supported_versions" extension (Section 4.2.1) and the legacy_version field MUST be set to 0x0303, which is the version number for TLS 1.2. TLS 1.3 ClientHellos are identified as having a legacy_version of 0x0303 and a supported_versions extension present with 0x0304 as the highest version indicated therein. (See Appendix D for details about backward compatibility.)
	legacy_version int32
	// 32 bytes generated by a secure random number generator. See Appendix C for additional information.
	random                     []byte
	legacy_session_id          int
	cipher_suites              int
	legacy_compression_methods int
	extensions                 int
}
